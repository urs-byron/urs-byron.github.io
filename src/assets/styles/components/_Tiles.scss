@use 'sass:map';

// tlu stands for Tile Unit Size
$tlu: 57.5px;

@function size-tile($multiplier) {
    @return $multiplier * $tlu + (($multiplier - 1) * 10px);
}

$tile-dimensions: (
    'badge': (
        'height': size-tile(1),
        'width': size-tile(1),
    ),
    'full': (
        'height': size-tile(2),
        'width': size-tile(2),
    ),
    'wide': (
        'height': size-tile(2),
        'width': size-tile(4),
    ),
    'big': (
        'height': size-tile(4),
        'width': size-tile(4),
    ),
);

$icon-rects: (
    'badge': (
        'icon-size': 30px,
        'icon-lift': 0px,
        'icon-desc-h': 0px,
    ),
    'full': (
        'icon-size': 70px,
        'icon-lift': -10px,
        'icon-desc-h': 16px,
    ),
    'wide': (
        'icon-size': 70px,
        'icon-lift': -10px,
        'icon-desc-h': 16px,
    ),
    'big': (
        'icon-size': 70px,
        'icon-lift': -20px,
        'icon-desc-h': 16px,
    ),
);

$image-sets: (
    'wide': (
        'p-h': 16px,
    ),
    'big': (
        'p-h': 16px,
    ),
);

$news-sets: (
    'wide': (
        'header-h': 40px,
    ),
    'big': (
        'header-h': 40px,
    ),
);

$information-sets: (
    'wide': (
        'header-h': 40px,
    ),
    'big': (
        'header-h': 40px,
    ),
);

$icon-rect-types: ();
$image-set-types: ();
$news-set-types: ();
$information-types: ();

@each $key, $values in $tile-dimensions {
    $icon-rect-value: map.merge($values, map-get($icon-rects, $key));
    $icon-rect-types: map-merge(
        $icon-rect-types,
        (
            $key: $icon-rect-value,
        )
    );

    @if $key == 'wide' or $key == 'big' {
        $image-set-value: map.merge($values, map-get($image-sets, $key));
        $image-set-types: map-merge(
            $image-set-types,
            (
                $key: $image-set-value,
            )
        );

        $news-set-value: map.merge($values, map-get($news-sets, $key));
        $news-set-types: map-merge(
            $news-set-types,
            (
                $key: $news-set-value,
            )
        );

        $information-value: map.merge($values, map-get($news-sets, $key));
        $information-types: map-merge(
            $information-types,
            (
                $key: $information-value,
            )
        );
    }
}

@keyframes pop-out {
    0% {
        transform: scale(0);
    }
    100% {
        transform: scale(1);
    }
}

@mixin tile-constants($sizes) {
    height: map.get($sizes, 'height');
    width: map.get($sizes, 'width');

    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;

    cursor: pointer;

    transition: box-shadow 0.35s;
    box-shadow: 0;

    position: relative;
    top: 0;
    right: 0;

    &:hover {
        box-shadow: 0px 0px 0px 5px rgba(0, 0, 0, 0.2);
        -webkit-box-shadow: 0px 0px 0px 5px rgba(0, 0, 0, 0.2);
        -moz-box-shadow: 0px 0px 0px 5px rgba(0, 0, 0, 0.2);
    }

    &:has(a) {
        &::after {
            content: '\f059';
            font-family: 'Font Awesome 5 Free';
            font-style: normal;
            font-weight: normal;
            text-decoration: inherit;

            height: 15px;
            width: 15px;

            font-size: 10px;

            position: absolute;
            top: 5px;
            right: 0;
        }
    }

    > *:first-child {
        animation: pop-out 0.78s ease 0s 1 normal forwards;
    }
}

@each $type, $sizes in $icon-rect-types {
    .icon-rect-#{$type} {
        --bs-spread: 0px;
        padding: 10px 10px 5px 10px;

        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: auto map.get($sizes, 'icon-desc-h');

        // TILE CONSTANTS
        @include tile-constants($sizes);
        // always copy over to different tile variations

        figure,
        a {
            display: flex;
            justify-content: center;
            align-items: center;

            svg {
                height: map.get($sizes, 'icon-size');
                width: map.get($sizes, 'icon-size');

                transform: translateY(
                    map.get($sizes, 'icon-desc-h') +
                        map.get($sizes, 'icon-lift')
                );
            }
        }

        figcaption {
            font-size: 9pt;
        }

        @if $type == 'badge' {
            padding: 10px;

            figcaption {
                display: none;
            }
        }
    }
}

@mixin tile-move() {
    &.move-up {
        transform: translateY(-100%);
    }
    &.move-down {
        transform: translateY(0);
    }
}

@each $type, $sizes in $image-set-types {
    .image-set-#{$type} {
        // TILE CONSTANTS
        @include tile-constants($sizes);
        // always copy over to different tile variations

        overflow: hidden;

        ul {
            height: inherit;
            width: inherit;

            display: grid;

            li {
                grid-area: 1/1;

                height: inherit;
                width: inherit;
                padding: 10px 10px 5px 10px;

                display: flex;
                flex-direction: column-reverse;

                background-position: center;
                background-repeat: no-repeat;

                transition: transform 1s;

                //  TILE CONSTANT for movings
                @include tile-move();

                p {
                    height: map.get($sizes, 'p-h');

                    overflow: hidden;

                    text-overflow: ellipsis;
                    font-size: 9pt;
                }
            }
        }
    }
}

@each $type, $sizes in $news-set-types {
    .news-set-#{$type} {
        // TILE CONSTANTS
        @include tile-constants($sizes);
        // always copy over to different tile variations

        overflow: hidden;

        ul {
            height: inherit;
            width: inherit;

            display: grid;

            li {
                grid-area: 1/1;

                height: inherit;
                width: inherit;

                transition: transform 1s;

                //  TILE CONSTANT for movings
                @include tile-move();

                article {
                    height: inherit;
                    width: inherit;

                    background-size: cover;
                    background-position: center;

                    display: flex;
                    flex-direction: column-reverse;

                    header {
                        height: map.get($sizes, 'header-h');
                        padding: 5px 10px;

                        display: grid;
                        grid-template-rows: 1fr;
                        grid-template-columns: 50px auto;

                        align-content: center;

                        font-size: 9pt;

                        span {
                            height: 30px;
                            width: 30px;

                            align-self: center;

                            svg {
                                display: inline-flex;
                                align-items: center;

                                // align-self: center;
                                height: 100% !important;
                                width: 100% !important;
                            }
                        }

                        em,
                        p {
                            height: 15px;

                            display: inline-block;

                            overflow: hidden;
                            text-overflow: ellipsis;
                        }
                    }
                }
            }
        }
    }
}

@each $type, $sizes in $information-types {
    .information-#{$type} {
        // TILE CONSTANTS
        @include tile-constants($sizes);
        // always copy over to different tile variations

        padding: 10px 10px 5px 10px;

        display: grid;
        grid-template-rows: auto 25px;

        section {
            overflow-x: hidden;
            overflow-y: scroll;

            mark {
                color: inherit;
                font-size: 16pt;
            }

            p {
                font-size: 9pt;
                overflow-y: visible;
                white-space: wrap;
            }
        }

        svg {
            height: 25px;
            width: 25px;

            align-self: flex-end;
        }
    }
}
